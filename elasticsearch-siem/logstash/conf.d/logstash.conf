input {
    syslog {
        id => "pf_audit_in"
        port => 20514
        type => syslog
        add_field => {"log_type" => "PF_Audit_Log"}
    }

    syslog {
        id => "pf_provisioner_in"
        port => 20515
        type => syslog
        add_field => {"log_type" => "PF_Provisioner_Log"}
    }

    syslog {
        id => "pd_directory_in"
        port => 20516
        type => syslog
        add_field => {"log_type" => "PD_Access_Log"}
    }

    syslog {
        id => "pf_system_in"
        port => 20517
        type => syslog
        add_field => {"log_type" => "PF_System_Log"}
    }

    syslog {
        id => "pa_system_in"
        port => 20518
        type => syslog
        add_field => {"log_type" => "PA_System_Log"}
    }

    syslog {
        id => "pa_audit_in"
        port => 20519
        type => syslog
        add_field => {"log_type" => "PA_Audit_Log"}
    }
}

filter{
    #Log4J Pattern
    if([log_type] == "PF_Audit_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }
        geoip {
            source => "ip"
        }

        translate {
            field => "ip"
            destination => "threat_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "ip"
            destination => "tor_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
            refresh_behaviour => "replace"
        }
    }

    #Log4J Pattern
    if([log_type] == "PF_Provisioner_Log"){
        csv{
            columns => ["long_log_timestamp","event_time","company_name","product_name","log_type_stamp","pfversion","event_type","cycle_id","channel_id","event_type","source_id","target_id","is_success","non_success_cause"]
            separator => "| "
        }
    }

    if([log_type] == "PD_Access_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }

        grok {
            match => { "message" => "\A%{WORD:ldapType} %{GREEDYDATA}" }
        }

        mutate{
            gsub => [ 
                "filter", '"', ""
            ]
            gsub => [ 
                "dn", '"', ""
            ]
        }

        geoip {
            source => "requesterIP"
        }

        translate {
            field => "requesterIP"
            destination => "threat_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "requesterIP"
            destination => "tor_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
            refresh_behaviour => "replace"
        }

        mutate {
            remove_field => "[message]"
        }
    }

    if([log_type] == "PF_System_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }

    }

    if([log_type] == "PA_Audit_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }

        geoip {
            source => "client"
        }

        translate {
            field => "client"
            destination => "threat_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/AlienVaultIP.yml'
            refresh_behaviour => "replace"
        }

        translate {
            field => "client"
            destination => "tor_intel"
            fallback => "No"
            dictionary_path => '/etc/logstash/enrichment/TorNodes.yml'
            refresh_behaviour => "replace"
        }
    }

    if([log_type] == "PA_System_Log"){
        kv {
            source => "[message]"
            value_split => "="
        }
    }
}

output{
    if([log_type] == "PF_Audit_Log"){
        elasticsearch {
            id => "audit_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pf-audit-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PF_Provisioner_Log"){
        elasticsearch {
            id => "provisioner_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pf-provisioner-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PD_Access_Log"){
        elasticsearch {
            id => "pd_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pd-access-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PF_System_Log"){
        elasticsearch {
            id => "pf_system_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pf-system-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }
    if([log_type] == "PA_System_Log"){
        elasticsearch {
            id => "pa_system_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pa-system-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    } 
    if([log_type] == "PA_Audit_Log"){
        elasticsearch {
            id => "pa_audit_out"
            ssl => true
            ssl_certificate_verification => false
            hosts => ["https://es01:9200","https://es02:9200"]
            index => "pa-audit-logs-%{+YYYY.MM.dd}"
            user => "elastic"
            password => "${ELASTIC_PASSWORD}"
        }
    }  
}
